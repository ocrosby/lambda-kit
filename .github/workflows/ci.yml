name: CI

on:
  push:
    branches:
      - '*'
      - 'feature/*'
  pull_request:
    branches:
      - '*'

  workflow_dispatch:

env:
  PYTHON_VERSION: 3.12
  NODE_VERSION: '21.1.0'

jobs:
  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Run eslint
        run: npm run lint

  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history and tags

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Print versions
        run: |
          git --version
          node --version
          npm --version
          npx commitlint --version

      - name: Install commitlint
        run: |
          npm install conventional-changelog-conventionalcommits
          npm install commitlint@latest

      - name: Validate current commit (last commit) with commitlint
        if: github.event_name == 'push'
        run: npx commitlint --last --verbose

      - name: Validate PR commits with commitlint
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Development Dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install invoke
        invoke install

    - name: Validate Complexity
      run: invoke check-complexity --max-complexity 5

    - name: Analyze Syntax
      run: invoke lint

  test:
    runs-on: ubuntu-latest
    needs:
      - lint
      - eslint
      - commitlint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Development Dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install setuptools wheel build tox invoke
        invoke install

    - name: Run Unit Tests
      run: invoke coverage

    - name: Coveralls
      uses: coverallsapp/github-action@v2

  build:
    runs-on: ubuntu-latest
    needs:
      - test
    if: github.ref == 'refs/heads/main'  # Only run on the main branch

    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history and tags

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Development Dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install setuptools wheel build tox invoke
        invoke install

    - name: Run Semantic Release
      id: semantic_release
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: invoke semantic-release

    - name: Set Release Status
      id: set_release_status
      run: |
        if grep -q "no relevant changes" <<< "${{ steps.semantic_release.outputs.stdout }}"; then
          echo "release_needed=false" >> $GITHUB_ENV
        else
          echo "release_needed=true" >> $GITHUB_ENV
        fi

    - name: Build Package
      if: steps.set_release_status.outputs.release_needed == 'true'
      run: invoke build

    - name: Upload dist directory
      if: steps.set_release_status.outputs.release_needed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  release:
    runs-on: ubuntu-latest
    needs:
      - build
    if: github.ref == 'refs/heads/main' && needs.build.outputs.release_needed == 'true'  # Only run on the main branch and if release is needed

    steps:
    - name: Download dist artifact
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python Dependencies
      run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install twine

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
          python3 -m twine upload --repository pypi dist/*
